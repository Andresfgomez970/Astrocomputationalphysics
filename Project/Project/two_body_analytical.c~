#include "two_body_analytical.h"

/////////////////////////
// 1.
////////////////////////
int Rotation( double theta , double *v, char *axis)
{
  /// This routine is designed to do a rotation along any of the x,y or z axis
  
  int i; // counter for assignations 
  double c, s; //sin and cos

  c = cos(theta);
  s = sin(theta);
  
  double vo[] = {0,0,
		 0,0,
		 0,0};

  double rz[] = {c,-s,0,
		 s,c,0,
		 0,0,1};

  double ry[] = {c,0,s,
		0,1,0,
		-s,0,c};

  double rx[] = {1,0,0,
		0,c,-s,
		0,s,c};
  
  double r[] = {0,0,0,
		0,0,0,
		0,0,0};

  if ( strcmp (axis,"z") == 0 )
    {
      for (i=0; i<3*DIM; i++)
	r[i] = rz[i];
    }

  else if ( strcmp (axis,"y") == 0 )
    {
      for (i=0; i<3*DIM; i++)
	r[i] = ry[i];
    }

  else if ( strcmp (axis,"x") == 0 )
    {
      for (i=0; i<3*DIM; i++)
	r[i] = rx[i];
    }
  
  else
    {
      printf("%s","The option enter for the rotation is invalid"); 
      exit(0);
    }

      
  for(i=0; i<2*DIM; i++)
    {
      vo[i] = v[i];
    }  

  /*
  gsl_matrix_view R = gsl_matrix_view_array(r, 3, 3);
  gsl_matrix_view Vn = gsl_matrix_view_array(v, 3, 2);  
  gsl_matrix_view Vo = gsl_matrix_view_array(vo, 3, 2);
  
  gsl_blas_dgemm (CblasNoTrans, CblasNoTrans,
		  1.0, &R.matrix, &Vo.matrix,
		  0.0, &Vn.matrix);
  */
  
  
  //Other option for the matrix multiplication
  int j, k;
  int Ncol=2, Nrows=3; 
  for (i = 0;  i < Nrows; i++)
    {
      for (j=0; j < Ncol; j++)
	{
	  v[i*Ncol+j] = 0; 
	  //printf("%lf, %d , %lf\n", v[i*Ncol+j], i*Ncol+j, vo[i*Ncol+j]);
	  for(k=0; k < Nrows; k++)
	    {
	      v[i*Ncol+j] += r[i*Nrows+k] * vo[k*Ncol+j];
	    }
	}
    }
  
  
  
  return 0; 
}



/////////////////////////
// 2.
////////////////////////
int Euler_angles_rotation(double *v, double w, double i, double W)
{
  
  Rotation( w ,v, "z");  
  Rotation( i ,v, "x");
  Rotation( W ,v, "z");

  return 0; 
}


/////////////////////////
// 3.
////////////////////////
int Round_To_N_Decimal(double *r,int n)
{

  *r = roundf(*r * pow(10 ,n) )/ pow(10,n); 
 
  return 0; 
}


/////////////////////////
// 4.
////////////////////////
int Print_Vector_State(double *v)
{
  
  for (int i= 0; i < DIM; i++)
    {
      for (int j = 0; j < 2; j++)
	{
	  printf("%lf ", v[i*2+j] ); 
	}
      printf("\n");
    }

  return 0; 
} 



/////////////////////////
// 5.
////////////////////////
int Print_Orbital_State(orbital_Param * orbital_param)
{
  
  printf("The orbital parameters are: w %lf , i %lf, W %lf, rmin_ %lf, e %lf, f %lf", orbital_param[0].w*RTD,orbital_param[0].i*RTD,
	 orbital_param[0].W*RTD,orbital_param[0].rmin,orbital_param[0].e,orbital_param[0].f*RTD);
  
  
  return 0;
}



/////////////////////////
// 6.
////////////////////////
int Orbital_Parameters_To_State_Vector(double mu, double *v, orbital_Param orbital_param)
{
  double r;
  double hop = mu / pow (  orbital_param.rmin*(1+orbital_param.e)  ,  0.5);
  
  r = (1+orbital_param.e)*orbital_param.rmin/( 1 + orbital_param.e*cos(orbital_param.f) );

  double v_orbit_plane[2*DIM] = {r*cos(orbital_param.f), -hop*sin(orbital_param.f),
				 r*sin(orbital_param.f), hop*( orbital_param.e + cos(orbital_param.f) ),
				 0,0};  
  
  Euler_angles_rotation(v_orbit_plane, orbital_param.w, orbital_param.i, orbital_param.W); 

  
  for (int i = 0 ; i<2*DIM; i++)
    v[i] = v_orbit_plane[i];
  
  return 0; 
}


/////////////////////////
// 7.
////////////////////////
int Vector_State_To_Orbital_Parameters(double mu, double *v, orbital_Param * orbital_param)
{
  double i_u[DIM] = {1,0,0};
  double j_u[DIM] = {0,1,0};
  double k_u[DIM] = {0,0,1};
  double h[DIM], n[DIM], pos[DIM], vel[DIM], ev[DIM], dummy1[DIM], dummy2[DIM]; 
  double dummy3; 
  
    
  for (int i = 0 ; i < 2*DIM; i++)
    Round_To_N_Decimal( &v[i] , 12);    
  
  Assign_Vector(v, pos, vel);

  // Specific angular momentum //
  Cross_Product(pos,vel,h);

  // Node vector //
  Cross_Product(k_u,h,n);

  dummy3 = Norm(n);
  Round_To_N_Decimal ( &dummy3 , 12); 
  
  if (  dummy3 < 1e-11 && dummy3 > -1e11  ) //This means that the orbit is in the plane xy
    {
      n[X]=1; n[Y]=0; n[Z]=0;
    }

  
  //////////////////////////
  /// Eccentricity 
  //////////////////////////
  
  
  // Eccentricity vector  //
  // calcualtion of vxh/mu 
  
  Cross_Product(vel,h,dummy1);
  Multiply_Vector_By_C(dummy1, 1./mu, dummy1);

  
  // calculation of r/norm(r)
  Multiply_Vector_By_C(pos, -1./Norm (pos) , dummy2);
  
  Sum_Vectors(dummy1, dummy2, ev); 
  orbital_param[0].e  = Norm(ev);
 
  
  /////////////////////
  // Ascending node
  ////////////////////

  dummy3 = Dot_Product(n,j_u);
  Round_To_N_Decimal( &dummy3 , 12);
  
  
  if ( dummy3 < 1e-11 && dummy3 > -1e11)
    {
      if (n[X]>0)
	{
	  orbital_param[0].W = 0; // Orbit in the plane xy
	}
      else
	{
	  orbital_param[0].W = M_PI; 
	}
    }
  
  else if (  Dot_Product(n,j_u)  > 0  )
    {
      dummy3 = Dot_Product(n,i_u)/Norm(n);
      orbital_param[0].W = acos ( dummy3 );
    }

  else
    {
      dummy3 = Dot_Product(n,i_u)/Norm(n);
      orbital_param[0].W = 2*M_PI - acos( dummy3 );
    }

  /////////////////////
  // Orbit inclination
  ////////////////////  

  orbital_param[0].i = acos(  Dot_Product(h,k_u)/Norm(h) ); 

  /////////////////////
  // Argument of periapsis
  ////////////////////
  
  dummy3 = Norm(ev);
  Round_To_N_Decimal( &dummy3 , 12); 
  
  if (  dummy3 < 1e-11 && dummy3 > -1e11  )
    {
      orbital_param[0].w = 0;
    }
   

  else if (   ( Dot_Product(ev,k_u) )  > 0  )
    {
      dummy3 = Dot_Product(ev,n); 
      orbital_param[0].w = acos ( dummy3/( Norm(ev)*Norm(n) ) );
    }

 
  else if( ( Dot_Product(ev,k_u) )  < 0)
    {
      dummy3 = Dot_Product(ev,n); 
      orbital_param[0].w = 2*M_PI - acos( dummy3/ ( Norm(ev)*Norm(n) ) );
    }
    
  else
    {
      if( ev[Y] > 0 || (ev[Y]==0 && ev[X]>0) )
	{
	  dummy3 = Dot_Product(ev,n);
	  orbital_param[0].w = acos ( dummy3/( Norm(ev)*Norm(n) ) );
	}
      else
	{
	  dummy3 = Dot_Product(ev,n);
	  orbital_param[0].w = 2*M_PI - acos( dummy3/ ( Norm(ev)*Norm(n) ) );
	}
	
    }
   

  ///////////////////
  // True anomaly
  //////////////////
  dummy3 = Dot_Product(pos,vel);
  Round_To_N_Decimal( &dummy3 , 12);
  
  if (  dummy3 < 1e-11 && dummy3 > -1e11 )
    orbital_param[0].f = 0;
  
  else if ( dummy3>0 )
    {
      orbital_param[0].f = acos( dummy3/ ( Norm(ev)*Norm(pos) )  ); 
    }

  else
    {
      orbital_param[0].f = 2*M_PI - acos( dummy3/ ( Norm(ev)*Norm(pos) )  ); 
    }

  //////////////////
  // Minimum distance between bodies
  /////////////////

  orbital_param[0].rmin = Norm(h)/mu/(1+orbital_param[0].e);  

  //Print_Orbital_State(orbital_param); 
  
  return 0; 
} 



/////////////////////////
// 8.
////////////////////////
double Dot_Product(double v[DIM],double w[DIM])
{
  double r = 0;
  
  for(int i = 0; i<DIM ; i++)
    r += v[i]*w[i];
  
  return r; 
}


/////////////////////////
// 9.
////////////////////////
int Cross_Product(double r[DIM],double v[DIM], double h[DIM])
{
  
  h[X] = r[Y]*v[Z] - r[Z]*v[Y];
  h[Y] = r[Z]*v[X] - r[X]*v[Z];
  h[Z] = r[X]*v[Y] - r[Y]*v[X]; 

  return 0; 
}


/////////////////////////
// 10.
////////////////////////
int Assign_Vector(double *v, double *pos, double *vel)
{
  for (int i= 0; i < DIM; i++)
    {
      pos[i] = v[i*2];
      vel[i] = v[i*2+1]; 
    }
  
  return 0; 
}


/////////////////////////
// 11.
////////////////////////
int Sum_Vectors(double v[DIM],double w[DIM], double sum[DIM] )
{
  
  for (int i= 0; i < DIM; i++)
    sum[i] = v[i] + w[i]; 
 
  return 0; 
}


/////////////////////////
// 12.
////////////////////////
int Multiply_Vector_By_C(double v[DIM], double c, double r[DIM])
{
  
  for (int i= 0; i < DIM; i++)
    r[i] = v[i]*c;

  
  return 0;
}


/////////////////////////
// 13.
////////////////////////
double Norm(double v[DIM])
{
  return sqrt( v[X]*v[X] + v[Y]*v[Y] + v[Z]*v[Z] );
}


/////////////////////////
// 14.
////////////////////////
double Kepler(double E, double e,double M)
{
  if (e>=0)
    {
      return E - e*sin(E)-M;
    }
  else
    {
      return e * sinh(E) - E - M;
    }
}

double Bisection_Kepler( double M, double e, double tol)
{
  double Eleft, Eright, Emean;
  double fleft, fright; 
  double err=1; 
  double Nmax;
  int i=0;
  
  Eleft =-10;  
  Eright = 10; 

  fleft  = Kepler(Eleft,e,M);
  fright = Kepler(Eright,e,M); 

  Nmax = (int) ( log ( (Eright - Eleft)/tol )/ log(2) + 1 ) ;

  if ( fleft*fright<0 )
  {
    //printf("%s","Initial condition satisfied\n");
  
  

    while (  (  (err>tol) || (err<-tol)  ) && ( i<Nmax )  )
      {

        Emean = (Eleft + Eright )/2.;
	
        if (  ( Kepler(Emean,e,M) * Kepler(Eright,e,M) ) > 0 )
	  {  
	    Eright = Emean; 
	  }
	
	else
	  {
	    Eleft = Emean; 
	  } 
	err = (Eright - Eleft);
	i+=1;
      }
    

  }
  else
    {
      printf("%s","Initial condition not satisfied\n");
      exit(0); 
    }
  
  return Emean;
  
}



